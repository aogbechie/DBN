{
    "collab_server" : "",
    "contents" : "\nsample_dbn <- function(bn_trans.fit_gRain,num_seqs_sim,num_samples){\n  n_nodes <- length(nodeNames(bn_trans.fit_gRain))/2\n  nodes_tpast <- nodeNames(bn_trans.fit_gRain)[-(1:n_nodes)]\n  nodes_t <- nodeNames(bn_trans.fit_gRain)[(1:n_nodes)]\n  # samples <- list()\n  samples <- mclapply(1:num_seqs_sim, function(i){\n  # for (i in 1:num_seqs_sim ) {\n\n    #data_simul <- c() \n    #initialize simulation by setting as evidence t_past = '1'\n    # data_simul <- rep(1, times = n_nodes*2)\n    data_simul <- as.data.frame( matrix(NA, nrow = num_samples, ncol = n_nodes*2) )\n    data_simul[1,] <- 1\n    names(data_simul) <- nodeNames(bn_trans.fit_gRain)\n    bn_ev <-setEvidence(bn_trans.fit_gRain, nodes = nodes_tpast, states =  rep(\"1\", times = n_nodes))\n    \n    #Simulate t\n    ts_data <-simulate.grain(bn_ev,1)\n    # Add time slice t simulated to time serie\n    data_simul[2,] <- ts_data\n    # data_simul <- rbind(data_simul, ts_data)\n    t <- 3\n    if(num_samples>2){\n      for (j in 1:(num_samples-1)){\n      #while(num_samples >= t ){\n        bn_ev <-setEvidence(bn_trans.fit_gRain, \n                            nodes = nodes_tpast, \n                            states =  as.character(data.frame(lapply(ts_data[1:n_nodes], as.character), \n                                                              stringsAsFactors=FALSE)))\n        ts_data <-simulate.grain(bn_ev,1)\n        #data_simul[2+j,] <- ts_data\n        data_simul[t,] <- ts_data\n        #t <- t+1\n        #data_simul <- rbind(data_simul, ts_data)\n      }\n  }\n    data_simul <- data_simul[-1,]\n    data_simul <- data.frame(lapply(data.frame(lapply(data_simul, as.character), stringsAsFactors=FALSE), as.integer))\n    #samples <- c(samples, list(data_simul))\n    return(data_simul)\n  })\n  \n  return(samples)\n  \n}\n\nlogLik_dbn_sample <- function(bn_trans.fit, sample_PC_t){\n  #Initialize parameters\n  num_nodes <- length(bn_trans.fit)\n  name_nodes <- names(bn_trans.fit)\n  nodes_i <- list()\n  sizes_t <- list()\n  log_CPD <- list()\n  N_freq <- list()\n  for (i in 1: (num_nodes/2)){\n    nodes_i <- c(nodes_i, list(names(dimnames(bn_trans.fit[[i]]$prob))))\n    sizes_t <- c(sizes_t, list(dim(bn_trans.fit[[i]]$prob)[1]))\n    log_CPD <- c(log_CPD, list(log(bn_trans.fit[[i]]$prob)))\n    N_freq <- c(N_freq, list(array(data = 0, dim = dim(bn_trans.fit[[i]]$prob))))\n  }\n  \n  T <- dim(sample_PC_t)[1]\n  #Compute frequencies of observations\n  for (t in 1:T){\n    for (i in 1:(num_nodes/2)){\n      dim_N_freq <- cumprod(dim(N_freq[[i]]))\n      dim_N_freq <- Lag(dim_N_freq,1)\n      dim_N_freq[1] <- 0\n      names(dim_N_freq) <- nodes_i[[i]]\n      pos <- rep(0, length(dim(N_freq[[i]])))\n      names(pos) <- nodes_i[[i]]\n      elem <-0\n      for (node in nodes_i[[i]]){\n        pos[node] <- as.integer(sample_PC_t[t,node])\n        if(name_nodes[i]==node){\n          elem <- elem + pos[node]\n        } else {\n          elem <- elem +(pos[node]-1)*dim_N_freq[node]\n        }\n      }\n      N_freq[[i]][elem] <- N_freq[[i]][elem] + 1 \n    }\n  }\n  # Calculate loglikelihood\n  loglik <- 0\n  for (i in 1:(num_nodes/2)){\n    loglik <- loglik + sum(N_freq[[i]]*log_CPD[[i]])\n  }\n}\n",
    "created" : 1458555677479.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1682766158",
    "id" : "F6541535",
    "lastKnownWriteTime" : 1458729713,
    "last_content_update" : 1458729713044,
    "path" : "~/sources/bnlearn/R/aa_01Laser_sampling_experiments.R",
    "project_path" : "R/aa_01Laser_sampling_experiments.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}